{"ast":null,"code":"import { Renderer2 } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router, NavigationStart } from '@angular/router';\nimport { AppVariablesService } from './service/app-variables.service';\nimport { AppSettings } from './service/app-settings.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./service/app-settings.service\";\nimport * as i4 from \"./service/app-variables.service\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(titleService, router, renderer, appSettings, appVariablesService) {\n      this.titleService = titleService;\n      this.router = router;\n      this.renderer = renderer;\n      this.appSettings = appSettings;\n      this.appVariablesService = appVariablesService;\n      this.appVariables = this.appVariablesService.getAppVariables();\n      router.events.subscribe(e => {\n        if (e instanceof NavigationStart) {\n          if (window.innerWidth < 768) {\n            this.appSettings.appSidebarMobileToggled = false;\n            this.appSettings.appSidebarEndMobileToggled = false;\n          }\n        }\n      });\n    }\n    ngOnInit() {\n      // page settings\n      if (this.appSettings.appDarkMode) {\n        this.onAppDarkModeChanged(true);\n      }\n      if (localStorage) {\n        if (localStorage['appDarkMode']) {\n          this.appSettings.appDarkMode = localStorage['appDarkMode'] === 'true' ? true : false;\n          if (this.appSettings.appDarkMode) {\n            this.onAppDarkModeChanged(true);\n          }\n        }\n        if (localStorage['appHeaderFixed']) {\n          this.appSettings.appHeaderFixed = localStorage['appHeaderFixed'] === 'true' ? true : false;\n        }\n        if (localStorage['appHeaderInverse']) {\n          this.appSettings.appHeaderInverse = localStorage['appHeaderInverse'] === 'true' ? true : false;\n        }\n        if (localStorage['appSidebarFixed']) {\n          this.appSettings.appSidebarFixed = localStorage['appSidebarFixed'] === 'true' ? true : false;\n        }\n        if (localStorage['appSidebarMinified']) {\n          this.appSettings.appSidebarMinified = localStorage['appSidebarMinified'] === 'true' ? true : false;\n        }\n        if (localStorage['appSidebarGrid']) {\n          this.appSettings.appSidebarGrid = localStorage['appSidebarGrid'] === 'true' ? true : false;\n        }\n        if (localStorage['appGradientEnabled']) {\n          this.appSettings.appGradientEnabled = localStorage['appGradientEnabled'] === 'true' ? true : false;\n        }\n      }\n    }\n    onWindowScroll($event) {\n      const doc = document.documentElement;\n      const top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n      if (top > 0 && this.appSettings.appHeaderFixed) {\n        this.appHasScroll = true;\n      } else {\n        this.appHasScroll = false;\n      }\n    }\n    // set page minified\n    onAppSidebarMinifiedToggled(val) {\n      this.appSettings.appSidebarMinified = !this.appSettings.appSidebarMinified;\n      if (localStorage) {\n        localStorage['appSidebarMinified'] = this.appSettings.appSidebarMinified;\n      }\n    }\n    // set app sidebar end toggled\n    onAppSidebarEndToggled(val) {\n      this.appSettings.appSidebarEndToggled = !this.appSettings.appSidebarEndToggled;\n    }\n    // hide mobile sidebar\n    onAppSidebarMobileToggled(val) {\n      this.appSettings.appSidebarMobileToggled = !this.appSettings.appSidebarMobileToggled;\n    }\n    // toggle right mobile sidebar\n    onAppSidebarEndMobileToggled(val) {\n      this.appSettings.appSidebarEndMobileToggled = !this.appSettings.appSidebarEndMobileToggled;\n    }\n    onAppDarkModeChanged(val) {\n      if (this.appSettings.appDarkMode) {\n        document.documentElement.setAttribute('data-bs-theme', 'dark');\n      } else {\n        document.documentElement.removeAttribute('data-bs-theme');\n      }\n      this.appVariables = this.appVariablesService.getAppVariables();\n      this.appVariablesService.variablesReload.emit();\n      document.dispatchEvent(new CustomEvent('theme-change'));\n    }\n    onAppThemeChanged(val) {\n      const newTheme = 'theme-' + this.appSettings.appTheme;\n      for (let x = 0; x < document.body.classList.length; x++) {\n        if (document.body.classList[x].indexOf('theme-') > -1 && document.body.classList[x] !== newTheme) {\n          document.body.classList.remove(document.body.classList[x]);\n        }\n      }\n      document.body.classList.add(newTheme);\n      this.appVariables = this.appVariablesService.getAppVariables();\n      this.appVariablesService.variablesReload.emit();\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Title), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.AppSettings), i0.ɵɵdirectiveInject(i4.AppVariablesService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      hostBindings: function AppComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"scroll\", function AppComponent_scroll_HostBindingHandler($event) {\n            return ctx.onWindowScroll($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      decls: 0,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {}\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}