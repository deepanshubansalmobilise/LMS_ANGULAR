{"ast":null,"code":"import { UserCoursesService } from './user-courses.service';\nimport { CoursesService } from './courses.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user-courses.service\";\nimport * as i2 from \"./courses.service\";\nexport let NewUserCourseService = /*#__PURE__*/(() => {\n  class NewUserCourseService {\n    constructor(UserCourseService, CourseService) {\n      this.UserCourseService = UserCourseService;\n      this.CourseService = CourseService;\n      this.userID = 2;\n      this.newCoursesInfo = [];\n      this.getCourses();\n    }\n    getnewUserCourseInfo() {\n      return this.newCoursesInfo;\n    }\n    getCourses() {\n      this.CourseService.getCourses().subscribe(courses => {\n        this.courses = courses;\n        this.getuserCourses();\n        // courses data is stored in this....\n        console.log(this.courses, \"1courses access\");\n      });\n    }\n    getuserCourses() {\n      this.UserCourseService.getCourses().subscribe(courses => {\n        this.userCourses = courses;\n        console.log(this.userCourses, 'userCourses access');\n        this.getuserCoursesInfo();\n      });\n    }\n    getuserCoursesInfo() {\n      // this.newCoursesInfo = [];\n      this.courses.forEach(course => {\n        let courseId = course.id.toString();\n        let purchased = false;\n        let progress = 0;\n        // check if the course is purchased\n        this.userCourses.forEach(userCourse => {\n          if (userCourse.userID == this.userID) {\n            if (userCourse.coursesInfo[courseId]) {\n              purchased = true;\n              progress = this.calculateProgress(userCourse.coursesInfo[courseId]);\n            }\n          }\n        });\n        // push course information to newCoursesInfo array\n        //   this.newCoursesInfo.push({\n        //     title: course.title,\n        //     id: course.id,\n        //     imageSrc: course.imageSrc,\n        //     progress: progress,\n        //     totalChapters: course.totalChapters,\n        //     totalTopics: course.chapters.reduce((total, chapter) => total + chapter.topics.length, 0),\n        //     totalAssignments: course.totalAssignments,\n        //     purchased: purchased\n        //   });\n        // });\n        this.newCoursesInfo.push({\n          title: course.title,\n          id: course.id,\n          imageSrc: course.imageSrc,\n          progress: progress,\n          totalChapters: course.totalChapters,\n          totalTopics: course.chapters.reduce((total, chapter) => total + chapter.topics.length, 0),\n          totalAssignments: course.totalAssignments,\n          purchased: purchased,\n          chapters: course.chapters.map(chapter => ({\n            id: chapter.id,\n            topics: chapter.topics.map(topic => ({\n              id: topic.id,\n              title: topic.title,\n              description: topic.description,\n              url: topic.url,\n              mediatype: topic.mediatype,\n              mediaTime: topic['media-time'],\n              assignments: topic.assignments\n            }))\n          }))\n        });\n      });\n      // sort newCoursesInfo array with purchased courses appearing first\n      this.newCoursesInfo.sort((a, b) => {\n        if (a.purchased && !b.purchased) return -1;\n        if (!a.purchased && b.purchased) return 1;\n        return 0;\n      });\n      console.log(this.newCoursesInfo, \"newCourseInfo access\");\n    }\n    calculateProgress(course) {\n      let totalTopics = 0;\n      let completedTopics = 0;\n      // iterate over each chapter\n      for (const chapterKey in course) {\n        if (chapterKey != \"name\") {\n          for (const topicKey in course[chapterKey]) {\n            if (topicKey != \"name\") {\n              totalTopics++;\n              if (course[chapterKey][topicKey].completed) {\n                completedTopics++;\n              }\n            }\n          }\n        }\n      }\n      // console.log(completedTopics, course, totalTopics)\n      // calculate progress percentage\n      const progress = totalTopics === 0 ? 0 : completedTopics / totalTopics * 100;\n      return progress;\n    }\n    static #_ = this.ɵfac = function NewUserCourseService_Factory(t) {\n      return new (t || NewUserCourseService)(i0.ɵɵinject(i1.UserCoursesService), i0.ɵɵinject(i2.CoursesService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NewUserCourseService,\n      factory: NewUserCourseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NewUserCourseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}